{"version":3,"sources":["components/headerComp/Header.jsx","components/boardComp/Card.jsx","components/boardComp/Cards.jsx","components/boardComp/Bord.jsx","components/modalComp/Modal.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","onModal","className","onClick","Card","card","onHint","useState","flip","setFlip","whenClicked","e","type","id","console","log","onContextMenu","char","roman","Cards","data","map","Bord","Modal","open","toggleOpen","children","ReactDom","createPortal","document","getElementById","App","showHint","setShowHint","charHint","setCharHint","charCurr","setCharCurr","modalState","setModalState","toggleModalState","src","alt","href","onMouseEnter","onMouseLeave","zhuyin","hint","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b7bcafb7.chunk.js","sourcesContent":["const Header = ({ onModal }) => {\n    return (\n        <header className='header'>\n            <div className='container'>\n                <h3 className='logo'>GrisInne - Zhuyin</h3>\n                <ul>\n                     <li><a onClick={onModal}>About</a></li>\n                </ul>\n            </div>\n        </header>\n    )\n}\n\nexport default Header\n","import React, { useState } from \"react\"\n\nconst Card = ({ card, onHint }) => {\n  const [flip, setFlip] = useState(false)\n\n    const whenClicked = (e) => {\n        if(e.type === 'click') {\n        onHint(card.id)\n        setFlip(!flip)\n        }\n        else if(e.type === 'contextmenu') {\n            console.log('right click')\n        }\n   }\n\n  return (\n     <div\n          className={`card ${flip ? 'flip' : ''}`}\n          onClick={whenClicked}\n          onContextMenu={whenClicked}\n          >\n          <div className='front'\n          >\n                {card.char}\n          </div>\n          <div className=\"back\">\n                {card.roman}\n          </div>\n        </div>\n \n        )\n    }\n\nexport default Card\n","import Card from './Card.jsx'\n\nconst Cards = ({ data, onHint }) => {\n    return (\n        <>\n            {data.map((card) => (\n                <Card key={card.id} card={card} onHint={onHint} />\n            ))}\n        </>\n        )\n    }\n\nexport default Cards\n","import Cards from './Cards.jsx'\n\nconst Bord = ({ onHint, data }) => {\n  return (\n    <div className='bord-grid'>\n        <Cards data={data} onHint={onHint} />\n    </div>\n  )\n}\n\nexport default Bord\n","import ReactDom from 'react-dom'\n\nconst Modal  = ({ open, toggleOpen, children  }) => {\n    if(!open) return null\n\n    return ReactDom.createPortal(\n        <>\n        <div className={`modalBg modalShowing-${open}`} onClick={toggleOpen}></div>\n        <div className=\"modal\">\n            {children}\n        </div>\n        </>,\n        document.getElementById(\"portal\")\n   )\n}\n\nexport default Modal\n","import './Assets/css/default.min.css'\nimport Header from './components/headerComp/Header.jsx'\nimport Bord from './components/boardComp/Bord.jsx'\nimport Modal from './components/modalComp/Modal.jsx'\nimport { useState } from 'react'\nimport data from './data.json'\n\nfunction App() {\n  const [showHint, setShowHint] = useState(false)\n  const [charHint, setCharHint] = useState('')\n  const [charCurr, setCharCurr] = useState('')\n  const [modalState, setModalState] = useState(false)\n\n  const toggleModalState = () => {\n    setModalState(!modalState)\n    console.log(modalState)\n  }\n\n  const toggleHint = (id) => {\n    // if (showHint === false) {\n    //   setShowHint(true)\n    // }\n    data.map((zhuyin) => {\n      if (zhuyin.id === id) {\n        setCharHint(zhuyin.hint)\n        setCharCurr(zhuyin.char)\n        console.log(zhuyin.hint)\n      }\n    })\n  }\n\n  const hintInfo = () => {\n    if (charCurr === '') return 'Click a CHAR for pronunciation'\n\n    return (\n      <p>\n        Char: <b>{charCurr}</b> , hover for hint\n      </p>\n    )\n  }\n\n  return (\n    <div className=\"app\">\n      <Header onModal={toggleModalState} />\n      <Modal open={modalState} toggleOpen={toggleModalState}>\n        <div className=\"modalInner\">\n          <div className=\"modalImage\">\n            <img\n              src=\"https://images.unsplash.com/photo-1613920175775-9418eda8cd59?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=634&q=80\"\n              alt=\"pic\"\n            />\n          </div>\n          <div className=\"modalText\">\n            <button className=\"exitButton\" onClick={() => toggleModalState()}>\n              X\n            </button>\n            <h2>About</h2>\n            <p>\n              This is a tool to help you learn zhuyin. Associating the chars\n              with a hint helps me to remember and I hope it will help you too!\n              For the sound of the chars, check youtube for zhuyin...\n              <br />\n              Upcoming feature <br /> Implementation of sound.\n            </p>\n            <a\n              className=\"git-button\"\n              href=\"https://www.github.com/joshtn/grisinne\"\n            >\n              Github Repo\n            </a>\n          </div>\n        </div>\n      </Modal>\n\n      <div\n        className=\"hint-toggle\"\n        onClick={() => setShowHint(!showHint)}\n        onMouseEnter={() => setShowHint(true)}\n        onMouseLeave={() => setShowHint(false)}\n      >\n        {hintInfo()}\n      </div>\n      {showHint && <div className=\"hint\">{charHint}</div>}\n      <Bord data={data} onHint={toggleHint} />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}